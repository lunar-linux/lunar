#!/bin/bash
#                                                          #
# subroutines - Lunar subroutines                          #
#                                                          #
############################################################
#                                                          #
# this WAS the subroutines of a source based Linux distro, #
# calls Sorcerer GNU/Linux, or SGL. SGL is no longer       #
# available with GPL license. Since this script was taken  #
# before licensing scheme change, no legal problems I      #
# guess.                                                   #
#                                                          #
# the code is re-written for Lunar. The previous Copyright #
# notices are kept; just in case some code is left :=)     #
# Kagan Kongar <kongar@tsrsb.org.tr>, 20020519             #
#                                                          #
############################################################
#                                                          #
# Copyright 2001 by Kyle Sallee                            #
#                                                          #
# Parts Copyrighted Hendrik Visage 2002 under GPLv2        #
#                                                          #
# Parts Copyrighted Kagan Kongar 2002 under GPLv2          #
#                                                          #
############################################################


# function : invoke_installwatch
# usage    : invoke_installwatch
# purpose  : start logging all disk accesses with installwatch
invoke_installwatch() {
  debug_msg "invoke_installwatch ($@)"
  if [ -e /usr/lib/installwatch.so ] ; then
    export LD_PRELOAD=/usr/lib/installwatch.so
  fi
}


# function : devoke_installwatch
# usage    : devoke_installwatch
# purpose  : stop logging all disk accesses with installwatch
devoke_installwatch() {
  debug_msg "devoke_installwatch ($@)"
  unset LD_PRELOAD
}


# function : parse_iw
# usage    : parse_iw
# purpose  : remove unwanted accesses from the installwatch file
parse_iw() {
  local OMIT_IN
  debug_msg "parse_iw ($@)"
  OMIT_IN="	rename\|	symlink\|	unlink\|	fchmod\|	access"

  grep -v "$OMIT_IN" "$INSTALLWATCHFILE" | cut -f3 | grep -v "^$SOURCE_DIRECTORY" | grep -v -f "$EXCLUDED"
  cat                "$INSTALLWATCHFILE" | cut -f4 | grep -v "^$SOURCE_DIRECTORY" | grep -v -f "$EXCLUDED" | grep "^/"
}

create_destdir_install_log() {
  debug_msg "create_destdir_install_log"
  (
    cd $DESTDIR

    TMP_INST_LOG=$(temp_create "install-log")

    INST_LOG="$INSTALL_LOGS/$MODULE-$VERSION"

    rm -f $INST_LOG >/dev/null 2>&1
    message  "${MESSAGE_COLOR}Creating ${FILE_COLOR}${INST_LOG}${DEFAULT_COLOR}"

    find . -print | sed 's/^.//' | sort                       > $TMP_INST_LOG
    echo "$INSTALL_LOGS/$MODULE-$VERSION"                    >> $TMP_INST_LOG
    echo "$COMPILE_LOGS/$MODULE-$VERSION.${COMPRESS_METHOD}" >> $TMP_INST_LOG
    echo "$MD5SUM_LOGS/$MODULE-$VERSION"                     >> $TMP_INST_LOG

    install -m644 $TMP_INST_LOG $INST_LOG

    temp_destroy $TMP_INST_LOG
  )
}

create_destdir_md5sum_log() {
  debug_msg "create_destdir_md5sum_log"
  (
    cd $DESTDIR
    rm -f $MD5SUM_LOGS/$MODULE-$VERSION &> /dev/null
    message "${MESSAGE_COLOR}Creating ${FILE_COLOR}$MD5SUM_LOGS/$MODULE-$VERSION${DEFAULT_COLOR}"

    sed 's;^/;;' < $INSTALL_LOGS/$MODULE-$VERSION | files | xargs -d '\n' md5sum > $MD5SUM_LOGS/$MODULE-$VERSION
  )
}

create_destdir_install_cache() {
  debug_msg "create_destdir_install_cache ($@)"
  if [[ $ARCHIVE == off ]]
  then
    return
  fi

  message "${MESSAGE_COLOR}Creating ${FILE_COLOR}$INSTALL_CACHE/$MODULE-$VERSION-$BUILD.tar.${COMPRESS_METHOD}${DEFAULT_COLOR}"
  (
    cd $DESTDIR
    tar cf - * | ${COMPRESS_METHOD/bz2/bzip2} $COMPRESS_METHOD_ARGS > "$INSTALL_CACHE/$MODULE-$VERSION-$BUILD.tar.${COMPRESS_METHOD}"
  )
}

finish_destdir_install() {
  debug_msg "finish_destdir_install ($@)"

  create_install_log    &&
  create_md5sum_log     &&
  create_install_cache  &&
  expand_cache_safe $INSTALL_CACHE/$MODULE-$VERSION-$BUILD.tar.${COMPRESS_METHOD} &&

  cleanup_old_module_files "$TMP_OLD_INST_LOG" "$INSTALL_LOGS/$MODULE-$VERSION" &&
  add_module $MODULE installed $VERSION $(find_module_size $MODULE $VERSION)
  verbose_msg "module size is $(find_module_size $MODULE $VERSION)"
}

create_installwatch_install_log() {
  local TMP_INST_LOG INST_LOG IFS MISOWNED_SYMLINKS
  debug_msg "create_installwatch_install_log ($@)"

  TMP_INST_LOG=$(temp_create "install-log")
  INST_LOG="$INSTALL_LOGS/$MODULE-$VERSION"
  rm -f $INST_LOG &> /dev/null

  message  "${MESSAGE_COLOR}Creating ${FILE_COLOR}${INST_LOG}${DEFAULT_COLOR}"

  export IFS="$TAB_ENTER_IFS"

  parse_iw | sort | uniq | filter "$LOCAL_EXCLUDED" | custom_filters | exists > $TMP_INST_LOG
  echo "$INSTALL_LOGS/$MODULE-$VERSION"                 >> $TMP_INST_LOG
  echo "$COMPILE_LOGS/$MODULE-$VERSION.${COMPRESS_METHOD}" >> $TMP_INST_LOG
  echo "$MD5SUM_LOGS/$MODULE-$VERSION"                  >> $TMP_INST_LOG

  install -m644 $TMP_INST_LOG $INST_LOG

  temp_destroy $TMP_INST_LOG
}


create_installwatch_md5sum_log()  {
  local FILE
  debug_msg "create_installwatch_md5sum_log ($@)"

  rm -f $MD5SUM_LOGS/$MODULE-$VERSION &> /dev/null
  message "${MESSAGE_COLOR}Creating ${FILE_COLOR}$MD5SUM_LOGS/$MODULE-$VERSION${DEFAULT_COLOR}"

  IFS=$'\n' files < $INSTALL_LOGS/$MODULE-$VERSION | xargs -d '\n' md5sum >> $MD5SUM_LOGS/$MODULE-$VERSION
}

create_installwatch_install_cache() {
  debug_msg "create_installwatch_install_cache($@)"

  if [ "$ARCHIVE" == "off" ] ; then
    return
  fi

  message "${MESSAGE_COLOR}Creating ${FILE_COLOR}$INSTALL_CACHE/$MODULE-$VERSION-$BUILD.tar.${COMPRESS_METHOD}${DEFAULT_COLOR}"
  tar cP --no-recursion -T $INSTALL_LOGS/$MODULE-$VERSION | ${COMPRESS_METHOD/bz2/bzip2} $COMPRESS_METHOD_ARGS > "$INSTALL_CACHE/$MODULE-$VERSION-$BUILD.tar.${COMPRESS_METHOD}"

}

save_old_install_log() {
  local old_version
  debug_msg "save_old_install_log ($@)"

  export TMP_OLD_INST_LOG=$(temp_create "${MODULE}.oldinstlog")
  if module_installed $MODULE; then
    old_version=$(installed_version $MODULE)
    debug_msg "creating old install log for $MODULE-$old_version ($TMP_OLD_INST_LOG)"
    cp "$INSTALL_LOGS/$MODULE-$old_version" $TMP_OLD_INST_LOG
  fi
}

delete_old_install_log() {
  debug_msg "delete_old_install_log ($@)"

  if [ -f $TMP_OLD_INST_LOG ]; then
    temp_destroy $TMP_OLD_INST_LOG
  fi
}

finish_installwatch_install() {
  debug_msg "finish_installwatch_install ($@)"

  create_install_log    &&
  create_md5sum_log     &&
  create_install_cache  &&

  cleanup_old_module_files "$TMP_OLD_INST_LOG" "$INSTALL_LOGS/$MODULE-$VERSION" &&

  add_module $MODULE installed $VERSION $(find_module_size $MODULE $VERSION)
  verbose_msg "module size is $(find_module_size $MODULE $VERSION)"
}

create_install_log() {
  debug_msg "create_install_log"
  if [[ ${DESTDIR_BUILD:-off} == on ]]
  then
    create_destdir_install_log
  else
    create_installwatch_install_log
  fi
}

create_md5sum_log() {
  debug_msg "create_md5sum_log"
  if [[ ${DESTDIR_BUILD:-off} == on ]]
  then
    create_destdir_md5sum_log
  else
    create_installwatch_md5sum_log
  fi
}

create_install_cache() {
  debug_msg "create_install_cache"
  if [[ ${DESTDIR_BUILD:-off} == on ]]
  then
    create_destdir_install_cache
  else
    create_installwatch_install_cache
  fi
}

finish_install() {
  debug_msg "finish_install"
  if [[ ${DESTDIR_BUILD:-off} == on ]]
  then
    finish_destdir_install
  else
    finish_installwatch_install
  fi
}
