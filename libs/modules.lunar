#!/bin/bash
#                                                          #
# This code is written for Lunar Linux, see                #
# http://lunar-linux.org                                   #
#                                                          #
############################################################
#                                                          #
# $FUNCTIONS/modules                                       #
# includes create_module_index, find_section               #
#          list_sections, list_modules, list_installed     #
#          check_module_index, run_details                 #
#          module_installed, module_held, module_exiled    #
#          hold_modules, unhold_modules                    #
# 20020528                                                 #
# 20030113 merging more functions in here - sofar          #
# 20030417 adding hold routines - sofar                    #
#                                                          #
############################################################
#                                                          #
# Copyrighted Kagan Kongar 2002 under GPLv2                #
# Portions Copyrighted Chuck Mead 2002 under GPLv2         #
# Portions Copyrighted Auke Kok 2003 under GPLv2           #
#                                                          #
############################################################


# function : list_sections
# usage    : list_sections
# purpose  : list the moonbase sections, filter out the specific files
list_sections() {
	debug_msg "list_sections ($@)"
	check_module_index
	cut -d: -f2 < $MODULE_INDEX | sort | uniq
	find $MOONBASE/zlocal -name DETAILS | sed "s:^$MOONBASE\/::g;s:\/[^\/]*\/DETAILS$::g" | sort | uniq
	return 0
}


# function : list_modules
# usage    : list_modules $SECTION
# purpose  : list the modules in a section, filter out the specific files
list_modules() {
	debug_msg "list_modules ($@)"
	if [[ -z "$1" ]] ; then
		error_message "${PROBLEM_COLOR}list_modules(): no SECTION defined!${DEFAULT_COLOR}"
		exit 1
	fi

	if [[ ! -d $MOONBASE/$1 ]] ; then
		error_message "${PROBLEM_COLOR}list_modules(): no such section \"$1\"!${DEFAULT_COLOR}"
		exit 1
	fi

	if grep -q ":$1$" $MODULE_INDEX; then
		grep ":$1$" $MODULE_INDEX | cut -d: -f1
		return 0
	else
	 (
		 cd $MOONBASE/$1
		 find . -maxdepth 2 -name DETAILS -type f | sed 's/\.\///g;s/\/DETAILS$//g'
	 )
	fi
}


# function : list_moonbase
# usage    : list_moonbase
# purpose  : returns the names of all modules in moonbase
list_moonbase() {
	local SECTION
	debug_msg "list_moonbase ($@)"
	for SECTION in $(list_sections) ; do
		list_modules $SECTION
	done
}


# function : list_installed
# usage    : list_installed
# purpose  : return a list of installed (or held) modules
list_installed() {
	debug_msg "list_installed ($@)"
	grep -e ":installed:" -e ":held:" $MODULE_STATUS | cut -d: -f1 | sort
}


# function: create_module_index
# usage   : create_module_index
# purpose : created an index file of module:section pair list
create_module_index() {
  local TMP_INDEX
  debug_msg "create_module_index ($@)"
  # make sure it exists before trying to see it's writeable
  # this also assures that depends.cache gets remade
  if [[ ! -f $MODULE_INDEX ]] ; then
    touch $MODULE_INDEX &> /dev/null
  fi

  # silently fail if we cannot write to $MODULE_INDEX, it is okay
  # for this to fail in case we are a mere user using lvu's search
  # functionality
  if [[ ! -w "$MODULE_INDEX" ]] ; then
    return 0
  fi

  verbose_msg "Updating module index file..."
  # doing this allows us to ctrl-C the process without breaking the
  # index file
  TMP_INDEX=$(temp_create "module.index")

  # here we have two options: system moonbase or custom:
  if [[ "$MOONBASE" == "/var/lib/lunar/moonbase" ]] && [[ -f $INSTALL_LOGS/moonbase-$(installed_version moonbase) ]] ; then
    # short way out:
    debug_msg "Quick generating \$MODULE_INDEX..."
    grep "/DETAILS$" $INSTALL_LOGS/moonbase-$(installed_version moonbase) | \
        sed -e 's:/var/lib/lunar/moonbase/::' -e 's:/DETAILS::g' \
        -e 's/\/\([^/]*\)$/:\1/' -e 's/\(.*\):\(.*\)/\2:\1/g' > $TMP_INDEX
  else
    # this *really* is the fastest way to do it, no guarantees, we
    # do have to make sure MOONBASE is coherent and tidy though
    debug_msg "Regenerating \$MODULE_INDEX manually..."
    find $MOONBASE -type f -name DETAILS ! -regex "$MOONBASE/zlocal/.*" \
        -printf "%h\n" | sed "s:$MOONBASE::;s:^/::;s:^\(.*\)/\([^/]*\)$:\2\:\1:" > $TMP_INDEX
  fi

  # this should be safe enough:
  lock_file $MODULE_INDEX &&
  install -m644 $TMP_INDEX $MODULE_INDEX

  # do not forget to do these at any time:
  unlock_file $MODULE_INDEX
  temp_destroy $TMP_INDEX
}


# function: check_module_index
# usage   : check_module_index
# purpose : checks if the index is up-to-date regarding to moonbase
function check_module_index() {
(
  debug_msg "check_module_index ($@)"
  local RESULT=1
  if [[ ! -e $MODULE_INDEX ]] || [[ ! -e $DEPENDS_CACHE ]]; then
    create_module_index
    create_depends_cache
    RESULT=0
  else
    if [[ -n "$(find $MOONBASE -type f -name "DEPENDS" -cnewer $DEPENDS_CACHE)" ]]; then
      create_depends_cache
      RESULT=0
    fi
    if [[ -n "$(find $MOONBASE -type f -name "DETAILS" -cnewer $MODULE_INDEX)" ]]; then
      create_module_index
      RESULT=0
    fi
  fi
  return $RESULT
)
}


# function : find_section
# usage    : find_section "module name"
# purpose  : finds the section of a given module as parameter
# returns  : (0) on success, (1) on failure, errors on stdout
find_section() {
	local SECTION SECTIONS
	debug_msg "find_section ($@)"

	# if using ZLOCAL, we must search there first
	if [[ "${ZLOCAL_OVERRIDES:-off}" == "on" ]] ; then
		for SECTION in $(find "$MOONBASE/zlocal/" -type d -name $1 | sed -e "s|$MOONBASE/||;s|/$1$||" ) ; do
			if [[ -f "$MOONBASE/$SECTION/$1/DETAILS" ]]; then
				echo $SECTION
				return 0
			fi
		done
	fi

	# otherwise check for ordinary modules named that way
	SECTION=$(awk -F: "(\$1==\"$1\"){print \$2;exit 0}" $MODULE_INDEX)
	if [[ -n "$SECTION" ]] && [[ -d "$MOONBASE/$SECTION/$1" ]] ; then
		echo "$SECTION"
		return 0
	fi

	# assuming we're not using ZLOCAL, we haven't looked there yet!
	# perhaps it's a zlocal module ? search zlocal for it now
	if SECTION=$(find "$MOONBASE/zlocal/" -type d -name $1 | sed -e "s|$MOONBASE/||;s|/$1$||" ) ; then
		if [[ -n "$SECTION" ]]; then
			echo $SECTION
			return 0
		fi
	fi

	# still not found? refresh module index... this may take a while
	if ! check_module_index ; then
		# shave some time off not trying the rest of the code below since that
		# is useless
		return 1
	fi

	# and search again, this should be quick now
	SECTION=$(awk -F: "(\$1==\"$1\"){print \$2;exit 0}" $MODULE_INDEX)
	if [[ -n "$SECTION" ]] && [[ -d "$MOONBASE/$SECTION/$1" ]] ; then
		echo "$SECTION"
		return 0
	fi

	# bummer, not found
	return 1
}


# function : run_details
# usage    : run_details module_name ($MODULE is pre-defined or param)
# purpose  : runs the DETAILS file of a module
# returns  : (0) on success, (1) on failure, error messages on stdout
run_details() {
  local TMP_DETAILS
  debug_msg "run_details ($@)"
  # Note: run_details doesn't EXIT the code, but merely drops a warning
  # (return 1), which means that the calling code needs to decide
  # if this is a problem or not... -sofar

  SECTION=$(find_section $1)
  if [[ -z "$SECTION" ]] ; then
    error_message  "${PROBLEM_COLOR}Unable to find module ${MODULE_COLOR}${1}${DEFAULT_COLOR}"  \
             "${PROBLEM_COLOR}in ${FILE_COLOR}$MOONBASE${DEFAULT_COLOR}"
    return 1
  else
    SCRIPT_DIRECTORY=$MOONBASE/$SECTION/$1
    if ! has_module_file $1 DETAILS ; then
      error_message  "${PROBLEM_COLOR}Module ${MODULE_COLOR}${1}" \
               "${DEFAULT_COLOR}${PROBLEM_COLOR}has no ${FILE_COLOR}DETAILS" \
               "${DEFAULT_COLOR}${PROBLEM_COLOR}file!${DEFAULT_COLOR}"
      return 1
    fi

    if [[ -z "$WANT_VERSION" ]] ; then
      run_module_file $1 DETAILS &> /dev/null || return 255
    else
      TMP_DETAILS=$(temp_create "details.version")
      if [[ -e "$MOONBASE/$SECTION/$1/DETAILS.$PLATFORM" ]]; then
        cat $MOONBASE/$SECTION/$1/DETAILS.$PLATFORM | sed '/^\s*VERSION=/d' > $TMP_DETAILS
      else
        cat $MOONBASE/$SECTION/$1/DETAILS | sed '/^\s*VERSION=/d' > $TMP_DETAILS
      fi        
      VERSION="$WANT_VERSION"
      . $TMP_DETAILS &> /dev/null || return 255
      temp_destroy $TMP_DETAILS
    fi
    SOURCE_DIRECTORY=${SOURCE_DIRECTORY:-$BUILD_DIRECTORY/$1-$VERSION}
    MODULE_CONFIG=${MODULE_CONFIG:-$DEPENDS_CONFIG/$MODULE}
    MODULE_PREFIX=${MODULE_PREFIX:-$DEFAULT_PREFIX}
    if [ "$MODULE_PREFIX" != "$DEFAULT_PREFIX" ]; then
      export PKG_CONFIG_PATH=$MODULE_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH
      export PATH=$PATH:$MODULE_PREFIX/bin
    fi
    return 0
  fi
}


has_module_file()
{
	if [[ -e "$SCRIPT_DIRECTORY/$2" ]] || [[ -e "$SCRIPT_DIRECTORY/$2.$PLATFORM" ]]; then
		return 0
	else
		return 1
	fi
}


# function : run_module_file
# usage    : run_module_file $MODULE $SCRIPTNAME
# purpose  : runs the given script for a pre-defined module
run_module_file() {
	debug_msg "run_module_file ($@)"
	if [[ "$1" == "moonbase" ]] ; then
		return 0
	fi
	if [[ -e "$SCRIPT_DIRECTORY/$2.$PLATFORM" ]]; then
		. $SCRIPT_DIRECTORY/$2.$PLATFORM
	elif [[ -e "$SCRIPT_DIRECTORY/$2" ]]; then
		. $SCRIPT_DIRECTORY/$2
	fi
}


# function : module_installed
# usage    : module_installed $MODULE
# purpose  : check if $MODULE is installed (or held)
module_installed()
{
	grep -q "^$1:[[:digit:]]*:installed:\|^$1:[[:digit:]]*:held:" $MODULE_STATUS
}


# function : module_held
# usage    : module_held $MODULE
# purpose  : check if $MODULE is held
module_held() {
	debug_msg "module_held ($@)"
	grep -q "^$1:[[:digit:]]*:held:" $MODULE_STATUS
}


module_license_accepted() {
  #
  # This code handles acceptance or rejection of certain licenses.
  #
  # valid licenses currently are:
  # osi == gpl gpl2 lgpl gfdl bsd mpl cc apache artistic qpl

  debug_msg "module_license_accepted ($@)"

  local L LICENSE IS_OSI
  LICENSE=$(run_details $1 > /dev/null ; echo $LICENSE)
  # assume it's osi if it's empty
  if [ -z "$LICENSE" ]; then
    debug_msg "assuming LICENSE=\"osi\""
    LICENSE="osi"
  fi

  # check for osi license
  case $LICENSE in
    gpl|gpl2|lgpl|gfdl|bsd|mpl|cc|apache|artistic|qpl|osi)
      IS_OSI=yes
    ;;
  esac

  # check if $MODULE's $LICENSE is accepted or not, works as follows:
  # if ACCEPTED_LICENSES is set, LICENSE *must* be listed, else if
  # REJECTED_LICESES is set, must _NOT_ be listed
  # * accept "osi" will accept all osi licenses
  # * accept "all" will accept anything
  if [[ -n "$ACCEPTED_LICENSES" ]]; then
    for L in $ACCEPTED_LICENSES; do
      if [[ "$L" == "osi" ]] && [[ "$IS_OSI" == "yes" ]] || [ "$L" == "all" ] || [ "$LICENSE" == "$L" ] ; then
        # explicitly accepted license!
	debug_msg "module_license_accepted: \"$LICENSE\" is explicitly accepted"
        return 0
      fi
    done
    # it was not explicitly accepted
    error_message "${MODULE_COLOR}$1${DEFAULT_COLOR}: ${PROBLEM_COLOR}License \"$LICENSE\" is not explicitly accepted${DEFAULT_COLOR}"
    return 1
  elif [[ -n "$REJECTED_LICENSES" ]]; then
    for L in $REJECTED_LICENSES; do
      if [[ "$LICENSE" == "$L" ]]; then
        # explicitly rejected license!
	error_message "${MODULE_COLOR}$1${DEFAULT_COLOR}: ${PROBLEM_COLOR}License \"$LICENSE\" is explicitly rejected${DEFAULT_COLOR}"
	return 1
      fi
    done
    # implicitly not rejected
    debug_msg "module_license_accepted: \"$LICENSE\" is not rejected"
    return 0
  else ## if [ -z "${ACCEPTED_LICENSES}${REJECTED_LICESES}" ]; then
    # so now we have a problem - the user didn't set their prefs
    if [[ "$IS_OSI" != "yes" ]]; then
      error_message "${MODULE_COLOR}$1${DEFAULT_COLOR}: ${PROBLEM_COLOR}License \"$LICENSE\" cannot be accepted by default${DEFAULT_COLOR}"
      return 1
    fi
  fi
}


# function : module_exiled
# usage    : module_exiled $MODULE
# purpose  : check if $MODULE is exiled
module_exiled() {
  debug_msg "module_exiled ($@)"
  $(cut -d: -f1,3 $MODULE_STATUS | grep -q "^$1:exiled")
}


# function : installed_version
# usage    : installed_version $MODULE
# purpose  : return the installed version of $MODULE
installed_version() {
  debug_msg "installed_version ($@)"
  grep "^$1:" $MODULE_STATUS | cut -d: -f4
}


# display current moonbase version of $MODULE
module_version() {
  debug_msg "module_version($@)"
  (
    if run_details $1 ; then
      echo $VERSION
    else
      exit 1
    fi
  )
}


# function : hold_modules
# usage    : hold_modules $MODULE [$MODULE....]
# purpose  : put modules on hold
hold_modules() {
  local MODULE
  debug_msg "hold_modules ($@)"
  if [[ -n "$1" ]] ; then
    lock_file $MODULE_STATUS_BACKUP &&
    lock_file $MODULE_STATUS &&
    for MODULE in "$@" ; do
      awk -F: -v mod=$MODULE '{if ($1==mod && $3 == "installed") {print $1":"$2":held:"$4":"$5}  else print;}' $MODULE_STATUS > $MODULE_STATUS_BACKUP
      cp $MODULE_STATUS_BACKUP $MODULE_STATUS
    done
    unlock_file $MODULE_STATUS
    unlock_file $MODULE_STATUS_BACKUP
  fi
}


# function : unhold_modules
# usage    : unhold_modules $MODULE [$MODULE....]
# purpose  : put modules on hold back to normal
unhold_modules () {
  local MODULE
  debug_msg "unhold_modules ($@)"
  if [[ -n "$1" ]] ; then
    lock_file $MODULE_STATUS_BACKUP &&
    lock_file $MODULE_STATUS &&
    for MODULE in "$@" ; do
      awk -F: -v mod=$MODULE '{if ($1==mod && $3 == "held") {print $1":"$2":installed:"$4":"$5}  else print;}' $MODULE_STATUS > $MODULE_STATUS_BACKUP
      cp $MODULE_STATUS_BACKUP $MODULE_STATUS
    done
    unlock_file $MODULE_STATUS
    unlock_file $MODULE_STATUS_BACKUP
  fi
}


# function : exile_modules
# usage    : exile_modules $MODULE [$MODULE....]
# purpose  : put modules on exile
exile_modules() {
  local MODULE
  debug_msg "exile_modules ($@)"
  if [[ -n "$1" ]] ; then
    lock_file $MODULE_STATUS_BACKUP &&
    lock_file $MODULE_STATUS &&
    for MODULE in "$@" ; do
      if $(module_installed $MODULE); then
        error_message "${PROBLEM_COLOR}Cannot exile installed module ${MODULE_COLOR}$MODULE${DEFAULT_COLOR}"
      else
        echo "$MODULE::exiled::" >> $MODULE_STATUS_BACKUP
        cp $MODULE_STATUS_BACKUP $MODULE_STATUS
      fi
    done
    unlock_file $MODULE_STATUS
    unlock_file $MODULE_STATUS_BACKUP
  fi
}


# function : unexile_modules
# usage    : unexile_modules $MODULE [$MODULE....]
# purpose  : put modules on exile back to normal
unexile_modules () {
  local MODULE
  debug_msg "unexile_modules  ($@)"
  if [ -n "$1" ] ; then
    lock_file $MODULE_STATUS_BACKUP &&
    lock_file $MODULE_STATUS &&
    for MODULE in "$@" ; do
      grep -v "^$MODULE:" $MODULE_STATUS > $MODULE_STATUS_BACKUP
      cp $MODULE_STATUS_BACKUP $MODULE_STATUS
    done
    unlock_file $MODULE_STATUS
    unlock_file $MODULE_STATUS_BACKUP
  fi
}


# function : remove_module
# usage    : remove_module; but $MODULE must be defined earlier
# purpose  : removed a module from the MODULE_STATUS files, no source removal
remove_module() {
  debug_msg "remove_module ($@)"

  # catch this on new boxes:
  if [ ! -f $MODULE_STATUS ] ; then
    touch $MODULE_STATUS $MODULE_STATUS_BACKUP $DEPENDS_STATUS $DEPENDS_STATUS_BACKUP
  fi

  verbose_msg "updating lunar state files after module removal"
  lock_file $MODULE_STATUS_BACKUP                              &&
  lock_file $MODULE_STATUS                                     &&
  grep -v "^$1:" $MODULE_STATUS > $MODULE_STATUS_BACKUP
  cp $MODULE_STATUS_BACKUP $MODULE_STATUS
  unlock_file $MODULE_STATUS
  unlock_file $MODULE_STATUS_BACKUP
}


# function: add_module
# usage   : add_module <module_name>
# purpose : adds the 1st parameter as the module name to the MODULE_STATUS files
add_module()  {
  debug_msg "add_module ($@)"

  # catch this on new boxes:
  if [ ! -f $MODULE_STATUS ] ; then
    touch $MODULE_STATUS $MODULE_STATUS_BACKUP $DEPENDS_STATUS $DEPENDS_STATUS_BACKUP
  fi

  verbose_msg "updating lunar state files after module installation"
  lock_file $MODULE_STATUS_BACKUP                             &&
  lock_file $MODULE_STATUS                                    &&
  if [ -s $MODULE_STATUS ]; then
    grep -v "^$1:" $MODULE_STATUS_BACKUP > $MODULE_STATUS 2>/dev/null
  fi &&
  echo "$1:$(date -u +%Y%m%d):$2:$3:$4" >> $MODULE_STATUS     &&
  cp $MODULE_STATUS $MODULE_STATUS_BACKUP
  unlock_file $MODULE_STATUS
  unlock_file $MODULE_STATUS_BACKUP
}


# function : purge_modules
# usage    : purge_modules
# purpose  : purge modules that were removed from moonbase
purge_modules() {
  local MODULE
  debug_msg "purge_modules ($@)"
  verbose_msg "Discovering modules that were removed from moonbase"
  # safetynet: don't wipe everything
  if [ $(list_moonbase | wc -l) -lt 100 ]; then
    error_message "${PROBLEM_COLOR}Error: ${DEFAULT_COLOR}${MESSAGE_COLOR} your moonbase seems damaged. Re-lin moonbase to fix.${DEFAULT_COLOR}"
    exit 1
  fi
  for MODULE in $(list_installed | grep -v "^moonbase$") ; do
  (
    if ! run_details $MODULE &> /dev/null ; then
      message "${MODULE_COLOR}$MODULE${DEFAULT_COLOR}${MESSAGE_COLOR} was removed from ${FILE_COLOR}${MOONBASE}${DEFAULT_COLOR}"
      if query "Do you want to remove ${MODULE_COLOR}$MODULE${DEFAULT_COLOR}${QUERY_COLOR} ?" y ; then
        lrm $MODULE
        continue
      else
        message "${MODULE_COLOR}$MODULE${DEFAULT_COLOR}${MESSAGE_COLOR} is kept and can be removed manually later${DEFAULT_COLOR}"
      fi
    fi
  )
  done
}


module_is_expired() {
  debug_msg "module_is_expired ($@)"
  (
    if [ -z "$MODULE" ] ; then
      MODULE=$1
    fi
    LINE=$(grep "^$MODULE:" $MODULE_STATUS | grep -v "^moonbase" | awk -F: '{print "IDATE="$2" STATUS="$3" IVERSION="$4}')
    eval $LINE
    if run_details $MODULE &> /dev/null ; then
      if [[ "$STATUS" == "installed" ]] ; then
        if [[ "$VERSION" != "$IVERSION" ]] || [[ -z "$IDATE" ]] ||
	  (( "$UPDATED" > "$IDATE" )) ; then
	  return 0
	fi
      fi
    fi
    # nope... it's not expired
    return 255
  )
}


# function : list_expired_modules
# usage    : list_expired_modules
# purpose  : return a list of modules that need to be updated
list_expired_modules() {
  local MODULE
  debug_msg "list_expired_modules ($@)"
  for MODULE in $(list_installed) ; do
    if $(module_is_expired $MODULE) ; then
      echo "$MODULE"
    fi
  done
}


# function : update_modules
# usage    : update_modules
# purpose  : update all installed modules that need to be updated
update_modules() {
  local IFS LIST QUEUE MODULE
  debug_msg "update_modules ($@)"

  export IFS="$STANDARD_IFS"

  verbose_msg "Searching for modules to update"
  LIST=$(list_expired_modules)

  if [ -z "$LIST" ] ; then
    verbose_msg "Nothing to update!"
    return 255
  fi

  verbose_msg "Checking for lunar or theedge"
  for MODULE in $LIST ; do
    if [[ "$MODULE" == "lunar" ]] || [[ "$MODULE" == "theedge" ]] ; then
      message "${MODULE_COLOR}$MODULE${MESSAGE_COLOR} will be updated${DEFAULT_COLOR}"
      message "${MESSAGE_COLOR}Run lunar renew afterwards to update other modules${DEFAULT_COLOR}"
      if query "Do you wish to continue ? " y ; then
	lin -c $MODULE
	exit $?
      fi
      return 255
    fi
  done

  verbose_msg "Sorting update queue"
  QUEUE=$(sort_by_dependency $LIST)

  message "${MESSAGE_COLOR}The following modules will be updated:${DEFAULT_COLOR}"
  TMP_QUEUE=$(temp_create "update-queue")
  for MODULE in $QUEUE ; do
    echo $MODULE >> $TMP_QUEUE
    echo $MODULE
  done

  unset MODULE
  if query "Do you wish to edit the update queue ? " n ; then
    edit_file $TMP_QUEUE
  fi
  QUEUE=$(cat $TMP_QUEUE)
  temp_destroy $TMP_QUEUE

  if [ -n "$QUEUE" ] ; then
    lin -c $QUEUE
  else
    verbose_msg "Nothing to update!"
    return 255
  fi
}



check_blacklist() {
  debug_msg "check_blacklist ($@)"
  if [ -f /var/state/lunar/blacklist.$PLATFORM ] ; then
    if grep "^$MODULE$" /var/state/lunar/blacklist.$PLATFORM ; then
      error_message "${PROBLEM_COLOR}ERROR:${DEFAULT_COLOR}${MESSAGE_COLOR} Module ${DEFAULT_COLOR}${MODULE_COLOR}$MODULE${DEFAULT_COLOR}${MESSAGE_COLOR} is blacklisted and will not be installed!${DEFAULT_COLOR}"
      exit 0
    fi
  fi
}


